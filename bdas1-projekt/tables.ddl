-- Generated by Oracle SQL Developer Data Modeler 23.1.0.087.0806
--   at:        2023-10-14 22:35:59 CEST
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE TABLE adresy (
    id    NUMBER NOT NULL,
    ulice VARCHAR2(100 CHAR) NOT NULL,
    cp    CLOB NOT NULL,
    psc   CLOB NOT NULL,
    mesto VARCHAR2(50 CHAR) NOT NULL,
    zeme  VARCHAR2(50 CHAR) NOT NULL
);

ALTER TABLE adresy ADD CONSTRAINT adresy_pk PRIMARY KEY ( id );

CREATE TABLE barvy (
    id    NUMBER NOT NULL,
    nazev VARCHAR2(50 CHAR) NOT NULL
);

ALTER TABLE barvy ADD CONSTRAINT barvy_pk PRIMARY KEY ( id );

CREATE TABLE dodane_zbozi (
    dodavatel_id NUMBER NOT NULL,
    zbozi_id     NUMBER NOT NULL,
    mnozstvi     NUMBER NOT NULL,
    cena_za_kus  NUMBER(6, 2) NOT NULL,
    datum_dodani TIMESTAMP WITH LOCAL TIME ZONE NOT NULL
);

ALTER TABLE dodane_zbozi ADD CONSTRAINT dodane_zbozi_pk PRIMARY KEY ( dodavatel_id,
                                                                      zbozi_id );

CREATE TABLE dodavatele (
    id        NUMBER NOT NULL,
    nazev     VARCHAR2(50 CHAR) NOT NULL,
    email     VARCHAR2(255 CHAR) NOT NULL,
    adresa_id NUMBER NOT NULL
);

ALTER TABLE dodavatele ADD CONSTRAINT dodavatele_pk PRIMARY KEY ( id );

CREATE TABLE druhy_rostliny (
    id    NUMBER NOT NULL,
    nazev VARCHAR2(50 CHAR) NOT NULL
);

ALTER TABLE druhy_rostliny ADD CONSTRAINT druhy_rostliny_pk PRIMARY KEY ( id );

CREATE TABLE kategorie (
    id    NUMBER NOT NULL,
    nazev VARCHAR2(50 CHAR) NOT NULL
);

ALTER TABLE kategorie ADD CONSTRAINT kategorie_pk PRIMARY KEY ( id );

CREATE TABLE objednane_zbozi (
    zbozi_id      NUMBER NOT NULL,
    objednavka_id NUMBER NOT NULL,
    mnozstvi      NUMBER NOT NULL,
    cena_za_kus   NUMBER(6, 2) NOT NULL
);

ALTER TABLE objednane_zbozi ADD CONSTRAINT objednane_zbozi_pk PRIMARY KEY ( zbozi_id,
                                                                            objednavka_id );

CREATE TABLE objednavky (
    id                   NUMBER NOT NULL,
    celkova_cena         NUMBER(8, 2) NOT NULL,
    datum_podani         TIMESTAMP WITH LOCAL TIME ZONE,
    dorucovaci_adresa_id NUMBER NOT NULL,
    uzivatel_id          NUMBER NOT NULL,
    stav_objednavky_id   NUMBER NOT NULL,
    zpusob_doruceni_id   NUMBER NOT NULL,
    zpusob_platby_id     NUMBER NOT NULL
);

ALTER TABLE objednavky ADD CONSTRAINT objednavky_pk PRIMARY KEY ( id );

ALTER TABLE objednavky ADD CONSTRAINT chk_objednavky_celkova_cena CHECK ( celkova_cena >= 0 and celkova_cena <= 999999.99 );

CREATE OR REPLACE TRIGGER t_objednavky_datum_podani
BEFORE INSERT ON objednavky
FOR EACH ROW
BEGIN
    IF :NEW.datum_podani < SYSTIMESTAMP THEN 
        RAISE_APPLICATION_ERROR(-20000, 'Datum podání nemůže být v minulosti');
    END IF;
END;
/

CREATE TABLE potreby (
    zbozi_id   NUMBER NOT NULL,
    potreba_id NUMBER NOT NULL,
    nazev      VARCHAR2(50 CHAR) NOT NULL,
    hmotnost   NUMBER(6, 2)
);

ALTER TABLE potreby ADD CONSTRAINT potreby_pk PRIMARY KEY ( zbozi_id );

ALTER TABLE potreby ADD CONSTRAINT potreby_uk UNIQUE ( potreba_id );

CREATE TABLE role (
    id               NUMBER NOT NULL,
    nazev            VARCHAR2(50 CHAR) NOT NULL,
    uroven_opravneni NUMBER NOT NULL
);

ALTER TABLE role ADD CONSTRAINT role_pk PRIMARY KEY ( id );

ALTER TABLE role ADD CONSTRAINT chk_role_uroven_opravneni CHECK ( uroven_opravneni >= 0 and uroven_opravneni <= 2 );

CREATE TABLE rostliny (
    zbozi_id         NUMBER NOT NULL,
    rostlina_id      NUMBER NOT NULL,
    pocet_kvetu      NUMBER,
    delka_stonku     NUMBER,
    barva_id         NUMBER NOT NULL,
    druh_rostliny_id NUMBER NOT NULL
);

ALTER TABLE rostliny ADD CONSTRAINT rostliny_pk PRIMARY KEY ( zbozi_id );

ALTER TABLE rostliny ADD CONSTRAINT rostliny_uk UNIQUE ( rostlina_id );

CREATE TABLE stavy_objednavky (
    id    NUMBER NOT NULL,
    nazev VARCHAR2(50) NOT NULL
);

ALTER TABLE stavy_objednavky ADD CONSTRAINT stavy_objednavky_pk PRIMARY KEY ( id );

CREATE TABLE uzivatele (
    id            NUMBER NOT NULL,
    username      VARCHAR2(20 CHAR) NOT NULL,
    email         VARCHAR2(255 CHAR) NOT NULL,
    password_hash BLOB NOT NULL,
    benefit_body  NUMBER NOT NULL,
    prijmeni      VARCHAR2(50 CHAR),
    jmeno         VARCHAR2(50 CHAR),
    adresa_id     NUMBER NOT NULL,
    role_id       NUMBER NOT NULL
);

ALTER TABLE uzivatele ADD CONSTRAINT uzivatele_pk PRIMARY KEY ( id );

CREATE TABLE zbozi (
    id           NUMBER NOT NULL,
    cena         NUMBER(6, 2) NOT NULL,
    pocet        NUMBER NOT NULL,
    kategorie_id NUMBER NOT NULL,
    typ          CHAR(1 CHAR) NOT NULL
);

ALTER TABLE zbozi
    ADD CHECK ( typ IN ( 'P', 'R' ) );

ALTER TABLE zbozi ADD CONSTRAINT zbozi_pk PRIMARY KEY ( id );

ALTER TABLE zbozi ADD CONSTRAINT chk_zbozi_cena CHECK ( cena >= 0 and cena <= 9999.99 );

CREATE TABLE zpusoby_doruceni (
    id    NUMBER NOT NULL,
    nazev VARCHAR2(50 CHAR) NOT NULL
);

ALTER TABLE zpusoby_doruceni ADD CONSTRAINT zpusoby_doruceni_pk PRIMARY KEY ( id );

CREATE TABLE zpusoby_platby (
    id    NUMBER NOT NULL,
    nazev VARCHAR2(50 CHAR) NOT NULL
);

ALTER TABLE zpusoby_platby ADD CONSTRAINT zpusob_platby_pk PRIMARY KEY ( id );

ALTER TABLE dodane_zbozi
    ADD CONSTRAINT dodane_zbozi_dodavatele_fk FOREIGN KEY ( dodavatel_id )
        REFERENCES dodavatele ( id );

ALTER TABLE dodane_zbozi
    ADD CONSTRAINT dodane_zbozi_zbozi_fk FOREIGN KEY ( zbozi_id )
        REFERENCES zbozi ( id );

ALTER TABLE dodavatele
    ADD CONSTRAINT dodavatele_adresy_fk FOREIGN KEY ( adresa_id )
        REFERENCES adresy ( id );

ALTER TABLE objednane_zbozi
    ADD CONSTRAINT objednane_zbozi_objednavky_fk FOREIGN KEY ( objednavka_id )
        REFERENCES objednavky ( id );

ALTER TABLE objednane_zbozi
    ADD CONSTRAINT objednane_zbozi_zbozi_fk FOREIGN KEY ( zbozi_id )
        REFERENCES zbozi ( id );

ALTER TABLE objednavky
    ADD CONSTRAINT objednavky_adresy_fk FOREIGN KEY ( dorucovaci_adresa_id )
        REFERENCES adresy ( id );

ALTER TABLE objednavky
    ADD CONSTRAINT objednavky_stavy_objednavky_fk FOREIGN KEY ( stav_objednavky_id )
        REFERENCES stavy_objednavky ( id );

ALTER TABLE objednavky
    ADD CONSTRAINT objednavky_uzivatele_fk FOREIGN KEY ( uzivatel_id )
        REFERENCES uzivatele ( id );

ALTER TABLE objednavky
    ADD CONSTRAINT objednavky_zpusoby_doruceni_fk FOREIGN KEY ( zpusob_doruceni_id )
        REFERENCES zpusoby_doruceni ( id );

ALTER TABLE objednavky
    ADD CONSTRAINT objednavky_zpusoby_platby_fk FOREIGN KEY ( zpusob_platby_id )
        REFERENCES zpusoby_platby ( id );

ALTER TABLE potreby
    ADD CONSTRAINT potreby_zbozi_fk FOREIGN KEY ( zbozi_id )
        REFERENCES zbozi ( id );

ALTER TABLE rostliny
    ADD CONSTRAINT rostliny_barvy_fk FOREIGN KEY ( barva_id )
        REFERENCES barvy ( id );

ALTER TABLE rostliny
    ADD CONSTRAINT rostliny_druhy_rostliny_fk FOREIGN KEY ( druh_rostliny_id )
        REFERENCES druhy_rostliny ( id );

ALTER TABLE rostliny
    ADD CONSTRAINT rostliny_zbozi_fk FOREIGN KEY ( zbozi_id )
        REFERENCES zbozi ( id );

ALTER TABLE uzivatele
    ADD CONSTRAINT uzivatele_adresy_fk FOREIGN KEY ( adresa_id )
        REFERENCES adresy ( id );

ALTER TABLE uzivatele
    ADD CONSTRAINT uzivatele_role_fk FOREIGN KEY ( role_id )
        REFERENCES role ( id );

ALTER TABLE zbozi
    ADD CONSTRAINT zbozi_kategorie_fk FOREIGN KEY ( kategorie_id )
        REFERENCES kategorie ( id );

CREATE OR REPLACE TRIGGER arc_fkarc_1_potreby BEFORE
    INSERT OR UPDATE OF zbozi_id ON potreby
    FOR EACH ROW
DECLARE
    d CHAR(1 CHAR);
BEGIN
    SELECT
        a.typ
    INTO d
    FROM
        zbozi a
    WHERE
        a.id = :new.zbozi_id;

    IF ( d IS NULL OR d <> 'P' ) THEN
        raise_application_error(-20223, 'FK POTREBY_ZBOZI_FK in Table POTREBY violates Arc constraint on Table ZBOZI - discriminator column typ doesn''t have value ''P'''
        );
    END IF;

EXCEPTION
    WHEN no_data_found THEN
        NULL;
    WHEN OTHERS THEN
        RAISE;
END;
/

CREATE OR REPLACE TRIGGER arc_fkarc_1_rostliny BEFORE
    INSERT OR UPDATE OF zbozi_id ON rostliny
    FOR EACH ROW
DECLARE
    d CHAR(1 CHAR);
BEGIN
    SELECT
        a.typ
    INTO d
    FROM
        zbozi a
    WHERE
        a.id = :new.zbozi_id;

    IF ( d IS NULL OR d <> 'R' ) THEN
        raise_application_error(-20223, 'FK ROSTLINY_ZBOZI_FK in Table ROSTLINY violates Arc constraint on Table ZBOZI - discriminator column typ doesn''t have value ''R'''
        );
    END IF;

EXCEPTION
    WHEN no_data_found THEN
        NULL;
    WHEN OTHERS THEN
        RAISE;
END;
/

CREATE SEQUENCE s_adresy_id START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER t_adresy_id BEFORE
    INSERT ON adresy
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := s_adresy_id.nextval;
END;
/

CREATE SEQUENCE s_barvy_id START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER t_barvy_id BEFORE
    INSERT ON barvy
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := s_barvy_id.nextval;
END;
/

CREATE SEQUENCE s_dodavatele_id START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER t_dodavatele_id BEFORE
    INSERT ON dodavatele
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := s_dodavatele_id.nextval;
END;
/

CREATE SEQUENCE s_druhy_rostliny_id START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER t_druhy_rostliny_id BEFORE
    INSERT ON druhy_rostliny
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := s_druhy_rostliny_id.nextval;
END;
/

CREATE SEQUENCE s_kategorie_id START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER t_kategorie_id BEFORE
    INSERT ON kategorie
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := s_kategorie_id.nextval;
END;
/

CREATE SEQUENCE s_objednavky_id START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER t_objednavky_id BEFORE
    INSERT ON objednavky
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := s_objednavky_id.nextval;
END;
/

CREATE SEQUENCE s_potreby_id START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER t_potreby_id BEFORE
    INSERT ON potreby
    FOR EACH ROW
    WHEN ( new.potreba_id IS NULL )
BEGIN
    :new.potreba_id := s_potreby_id.nextval;
END;
/

CREATE SEQUENCE s_role_id START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER t_role_id BEFORE
    INSERT ON role
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := s_role_id.nextval;
END;
/

CREATE SEQUENCE s_rostliny_id START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER t_rostliny_id BEFORE
    INSERT ON rostliny
    FOR EACH ROW
    WHEN ( new.rostlina_id IS NULL )
BEGIN
    :new.rostlina_id := s_rostliny_id.nextval;
END;
/

CREATE SEQUENCE s_stavy_objednavky_id START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER t_stavy_objednavky_id BEFORE
    INSERT ON stavy_objednavky
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := s_stavy_objednavky_id.nextval;
END;
/

CREATE SEQUENCE s_uzivatele_id START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER t_uzivatele_id BEFORE
    INSERT ON uzivatele
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := s_uzivatele_id.nextval;
END;
/

CREATE SEQUENCE s_zbozi_id START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER t_zbozi_id BEFORE
    INSERT ON zbozi
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := s_zbozi_id.nextval;
END;
/

CREATE SEQUENCE s_zpusoby_doruceni_id START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER t_zpusoby_doruceni_id BEFORE
    INSERT ON zpusoby_doruceni
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := s_zpusoby_doruceni_id.nextval;
END;
/

CREATE SEQUENCE s_zpusoby_platby_id START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER t_zpusoby_platby_id BEFORE
    INSERT ON zpusoby_platby
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := s_zpusoby_platby_id.nextval;
END;
/



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            17
-- CREATE INDEX                             0
-- ALTER TABLE                             38
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                          17
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                         15
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
